from autogen import AssistantAgent, UserProxyAgent, GroupChat, GroupChatManager
from fastapi import FastAPI, Request
from pydantic import BaseModel
import sqlite3
import uvicorn
import re
import streamlit as st
# --- Configuration ---
config = {
    "base_url": "https://openrouter.ai/api/v1",
    "api_key": "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",
    "model": "deepseek/deepseek-r1-0528-qwen3-8b:free"
}

# --- Define Agents ---
user = UserProxyAgent(
    name="Student",
    human_input_mode="NEVER",
    code_execution_config={"use_docker": False}
)

academic = AssistantAgent(name="AcademicAssistant", llm_config=config)
career = AssistantAgent(name="CareerCounselor", llm_config=config)
welfare = AssistantAgent(name="StudentWelfareAI", llm_config=config)
performance = AssistantAgent(name="PerformanceAnalyzer", llm_config=config)

agents = [academic, career, welfare, performance]

# --- Keyword Routing ---
keyword_map = {
    "Academic calendar": academic,
"Assignment": academic,
"Attendance": academic,
"Classroom": academic,
"Coursework": academic,
"Credit": academic,
"Curriculum": academic,
"Deadline": academic,
"Discussion": academic,
"Evaluation": academic,
"Exam": academic,
"GPA": academic,
"GPA_status": academic,
"GPA_tracker": academic,
"GPAs": academic,
"Gpa": academic,
"Grade": academic,
"Homework": academic,
"Lab": academic,
"Lecture": academic,
"Midterm": academic,
"Notes": academic,
"Professor": academic,
"Project": academic,
"Quiz": academic,
"Registration": academic,
"Review": academic,
"Schedule": academic,
"Semester": academic,
"Study": academic,
"Syllabus": academic,
"Teaching": academic,
"Textbook": academic,
"Tutor": academic,
"academic calendar": academic,
"academic calendar_status": academic,
"academic calendar_tracker": academic,
"academic calendars": academic,
"academiccalendar": academic,
"assignment": academic,
"assignment_status": academic,
"assignment_tracker": academic,
"assignments": academic,
"attendance": academic,
"attendance_status": academic,
"attendance_tracker": academic,
"attendances": academic,
"classroom": academic,
"classroom_status": academic,
"classroom_tracker": academic,
"classrooms": academic,
"coursework": academic,
"coursework_status": academic,
"coursework_tracker": academic,
"courseworks": academic,
"credit": academic,
"credit_status": academic,
"credit_tracker": academic,
"credits": academic,
"curriculum": academic,
"curriculum_status": academic,
"curriculum_tracker": academic,
"curriculums": academic,
"deadline": academic,
"deadline_status": academic,
"deadline_tracker": academic,
"deadlines": academic,
"discussion": academic,
"discussion_status": academic,
"discussion_tracker": academic,
"discussions": academic,
"evaluation": academic,
"evaluation_status": academic,
"evaluation_tracker": academic,
"evaluations": academic,
"exam": academic,
"exam_status": academic,
"exam_tracker": academic,
"exams": academic,
"gpa": academic,
"grade": academic,
"grade_status": academic,
"grade_tracker": academic,
"grades": academic,
"homework": academic,
"homework_status": academic,
"homework_tracker": academic,
"homeworks": academic,
"lab": academic,
"lab_status": academic,
"lab_tracker": academic,
"labs": academic,
"lecture": academic,
"lecture_status": academic,
"lecture_tracker": academic,
"lectures": academic,
"midterm": academic,
"midterm_status": academic,
"midterm_tracker": academic,
"midterms": academic,
"notes": academic,
"notes_status": academic,
"notes_tracker": academic,
"notess": academic,
"professor": academic,
"professor_status": academic,
"professor_tracker": academic,
"professors": academic,
"project": academic,
"project_status": academic,
"project_tracker": academic,
"projects": academic,
"quiz": academic,
"quiz_status": academic,
"quiz_tracker": academic,
"quizs": academic,
"registration": academic,
"registration_status": academic,
"registration_tracker": academic,
"registrations": academic,
"review": academic,
"review_status": academic,
"review_tracker": academic,
"reviews": academic,
"schedule": academic,
"schedule_status": academic,
"schedule_tracker": academic,
"schedules": academic,
"semester": academic,
"semester_status": academic,
"semester_tracker": academic,
"semesters": academic,
"study": academic,
"study_status": academic,
"study_tracker": academic,
"studys": academic,
"syllabus": academic,
"syllabus_status": academic,
"syllabus_tracker": academic,
"syllabuss": academic,
"teaching": academic,
"teaching_status": academic,
"teaching_tracker": academic,
"teachings": academic,
"textbook": academic,
"textbook_status": academic,
"textbook_tracker": academic,
"textbooks": academic,
"tutor": academic,
"tutor_status": academic,
"tutor_tracker": academic,
"tutors": academic,
"Ambition": career,
"Aptitude": career,
"Aspiration": career,
"Career": career,
"Coaching": career,
"Company": career,
"Cover letter": career,
"Cv": career,
"Employer": career,
"Experience": career,
"Field": career,
"Future": career,
"Goal": career,
"Guidance": career,
"Hiring": career,
"Industry": career,
"Internship": career,
"Interview": career,
"Job": career,
"Linkedin": career,
"Mentor": career,
"Networking": career,
"Opportunity": career,
"Path": career,
"Placement": career,
"Recruiter": career,
"Resume": career,
"Skills": career,
"Training": career,
"Workshop": career,
"ambition": career,
"ambition_status": career,
"ambition_tracker": career,
"ambitions": career,
"aptitude": career,
"aptitude_status": career,
"aptitude_tracker": career,
"aptitudes": career,
"aspiration": career,
"aspiration_status": career,
"aspiration_tracker": career,
"aspirations": career,
"career": career,
"career_status": career,
"career_tracker": career,
"careers": career,
"coaching": career,
"coaching_status": career,
"coaching_tracker": career,
"coachings": career,
"company": career,
"company_status": career,
"company_tracker": career,
"companys": career,
"cover letter": career,
"cover letter_status": career,
"cover letter_tracker": career,
"cover letters": career,
"coverletter": career,
"cv": career,
"cv_status": career,
"cv_tracker": career,
"cvs": career,
"employer": career,
"employer_status": career,
"employer_tracker": career,
"employers": career,
"experience": career,
"experience_status": career,
"experience_tracker": career,
"experiences": career,
"field": career,
"field_status": career,
"field_tracker": career,
"fields": career,
"future": career,
"future_status": career,
"future_tracker": career,
"futures": career,
"goal": career,
"goal_status": career,
"goal_tracker": career,
"goals": career,
"guidance": career,
"guidance_status": career,
"guidance_tracker": career,
"guidances": career,
"hiring": career,
"hiring_status": career,
"hiring_tracker": career,
"hirings": career,
"industry": career,
"industry_status": career,
"industry_tracker": career,
"industrys": career,
"internship": career,
"internship_status": career,
"internship_tracker": career,
"internships": career,
"interview": career,
"interview_status": career,
"interview_tracker": career,
"interviews": career,
"job": career,
"job_status": career,
"job_tracker": career,
"jobs": career,
"linkedin": career,
"linkedin_status": career,
"linkedin_tracker": career,
"linkedins": career,
"mentor": career,
"mentor_status": career,
"mentor_tracker": career,
"mentors": career,
"networking": career,
"networking_status": career,
"networking_tracker": career,
"networkings": career,
"opportunity": career,
"opportunity_status": career,
"opportunity_tracker": career,
"opportunitys": career,
"path": career,
"path_status": career,
"path_tracker": career,
"paths": career,
"placement": career,
"placement_status": career,
"placement_tracker": career,
"placements": career,
"recruiter": career,
"recruiter_status": career,
"recruiter_tracker": career,
"recruiters": career,
"resume": career,
"resume_status": career,
"resume_tracker": career,
"resumes": career,
"skills": career,
"skills_status": career,
"skills_tracker": career,
"skillss": career,
"training": career,
"training_status": career,
"training_tracker": career,
"trainings": career,
"workshop": career,
"workshop_status": career,
"workshop_tracker": career,
"workshops": career,
"Activity": welfare,
"Anxiety": welfare,
"Balance": welfare,
"Belonging": welfare,
"Club": welfare,
"Community": welfare,
"Counseling": welfare,
"Depression": welfare,
"Emotion": welfare,
"Event": welfare,
"Friend": welfare,
"Happiness": welfare,
"Health": welfare,
"Interaction": welfare,
"Isolation": welfare,
"Life": welfare,
"Mental": welfare,
"Mindfulness": welfare,
"Mood": welfare,
"Motivation": welfare,
"Participation": welfare,
"Peer": welfare,
"Psychology": welfare,
"Resilience": welfare,
"Social": welfare,
"Stress": welfare,
"Support": welfare,
"Talk": welfare,
"Therapy": welfare,
"Volunteer": welfare,
"Well-being": welfare,
"activity": welfare,
"activity_status": welfare,
"activity_tracker": welfare,
"activitys": welfare,
"anxiety": welfare,
"anxiety_status": welfare,
"anxiety_tracker": welfare,
"anxietys": welfare,
"balance": welfare,
"balance_status": welfare,
"balance_tracker": welfare,
"balances": welfare,
"belonging": welfare,
"belonging_status": welfare,
"belonging_tracker": welfare,
"belongings": welfare,
"club": welfare,
"club_status": welfare,
"club_tracker": welfare,
"clubs": welfare,
"community": welfare,
"community_status": welfare,
"community_tracker": welfare,
"communitys": welfare,
"counseling": welfare,
"counseling_status": welfare,
"counseling_tracker": welfare,
"counselings": welfare,
"depression": welfare,
"depression_status": welfare,
"depression_tracker": welfare,
"depressions": welfare,
"emotion": welfare,
"emotion_status": welfare,
"emotion_tracker": welfare,
"emotions": welfare,
"event": welfare,
"event_status": welfare,
"event_tracker": welfare,
"events": welfare,
"friend": welfare,
"friend_status": welfare,
"friend_tracker": welfare,
"friends": welfare,
"happiness": welfare,
"happiness_status": welfare,
"happiness_tracker": welfare,
"happinesss": welfare,
"health": welfare,
"health_status": welfare,
"health_tracker": welfare,
"healths": welfare,
"interaction": welfare,
"interaction_status": welfare,
"interaction_tracker": welfare,
"interactions": welfare,
"isolation": welfare,
"isolation_status": welfare,
"isolation_tracker": welfare,
"isolations": welfare,
"life": welfare,
"life_status": welfare,
"life_tracker": welfare,
"lifes": welfare,
"mental": welfare,
"mental_status": welfare,
"mental_tracker": welfare,
"mentals": welfare,
"mindfulness": welfare,
"mindfulness_status": welfare,
"mindfulness_tracker": welfare,
"mindfulnesss": welfare,
"mood": welfare,
"mood_status": welfare,
"mood_tracker": welfare,
"moods": welfare,
"motivation": welfare,
"motivation_status": welfare,
"motivation_tracker": welfare,
"motivations": welfare,
"participation": welfare,
"participation_status": welfare,
"participation_tracker": welfare,
"participations": welfare,
"peer": welfare,
"peer_status": welfare,
"peer_tracker": welfare,
"peers": welfare,
"psychology": welfare,
"psychology_status": welfare,
"psychology_tracker": welfare,
"psychologys": welfare,
"resilience": welfare,
"resilience_status": welfare,
"resilience_tracker": welfare,
"resiliences": welfare,
"social": welfare,
"social_status": welfare,
"social_tracker": welfare,
"socials": welfare,
"stress": welfare,
"stress_status": welfare,
"stress_tracker": welfare,
"stresss": welfare,
"support": welfare,
"support_status": welfare,
"support_tracker": welfare,
"supports": welfare,
"talk": welfare,
"talk_status": welfare,
"talk_tracker": welfare,
"talks": welfare,
"therapy": welfare,
"therapy_status": welfare,
"therapy_tracker": welfare,
"therapys": welfare,
"volunteer": welfare,
"volunteer_status": welfare,
"volunteer_tracker": welfare,
"volunteers": welfare,
"well-being": welfare,
"well-being_status": welfare,
"well-being_tracker": welfare,
"well-beings": welfare,
"Achievement": performance,
"Alert": performance,
"Analytics": performance,
"At-risk": performance,
"Behavior": performance,
"Comparison": performance,
"Dashboard": performance,
"Data": performance,
"Dropout": performance,
"Feedback": performance,
"Improvement": performance,
"Insight": performance,
"Intervention": performance,
"Metric": performance,
"Monitor": performance,
"Monitoring": performance,
"Observation": performance,
"Outcome": performance,
"Pattern": performance,
"Performance": performance,
"Predict": performance,
"Progress": performance,
"Ranking": performance,
"Report": performance,
"Results": performance,
"Retention": performance,
"Score": performance,
"Status": performance,
"Tracker": performance,
"Trend": performance,
"achievement": performance,
"achievement_status": performance,
"achievement_tracker": performance,
"achievements": performance,
"alert": performance,
"alert_status": performance,
"alert_tracker": performance,
"alerts": performance,
"analytics": performance,
"analytics_status": performance,
"analytics_tracker": performance,
"analyticss": performance,
"at-risk": performance,
"at-risk_status": performance,
"at-risk_tracker": performance,
"at-risks": performance,
"behavior": performance,
"behavior_status": performance,
"behavior_tracker": performance,
"behaviors": performance,
"comparison": performance,
"comparison_status": performance,
"comparison_tracker": performance,
"comparisons": performance,
"dashboard": performance,
"dashboard_status": performance,
"dashboard_tracker": performance,
"dashboards": performance,
"data": performance,
"data_status": performance,
"data_tracker": performance,
"datas": performance,
"dropout": performance,
"dropout_status": performance,
"dropout_tracker": performance,
"dropouts": performance,
"feedback": performance,
"feedback_status": performance,
"feedback_tracker": performance,
"feedbacks": performance,
"improvement": performance,
"improvement_status": performance,
"improvement_tracker": performance,
"improvements": performance,
"insight": performance,
"insight_status": performance,
"insight_tracker": performance,
"insights": performance,
"intervention": performance,
"intervention_status": performance,
"intervention_tracker": performance,
"interventions": performance,
"metric": performance,
"metric_status": performance,
"metric_tracker": performance,
"metrics": performance,
"monitor": performance,
"monitor_status": performance,
"monitor_tracker": performance,
"monitoring": performance,
"monitoring_status": performance,
"monitoring_tracker": performance,
"monitorings": performance,
"monitors": performance,
"observation": performance,
"observation_status": performance,
"observation_tracker": performance,
"observations": performance,
"outcome": performance,
"outcome_status": performance,
"outcome_tracker": performance,
"outcomes": performance,
"pattern": performance,
"pattern_status": performance,
"pattern_tracker": performance,
"patterns": performance,
"performance": performance,
"performance_status": performance,
"performance_tracker": performance,
"performances": performance,
"predict": performance,
"predict_status": performance,
"predict_tracker": performance,
"predicts": performance,
"progress": performance,
"progress_status": performance,
"progress_tracker": performance,
"progresss": performance,
"ranking": performance,
"ranking_status": performance,
"ranking_tracker": performance,
"rankings": performance,
"report": performance,
"report_status": performance,
"report_tracker": performance,
"reports": performance,
"results": performance,
"results_status": performance,
"results_tracker": performance,
"resultss": performance,
"retention": performance,
"retention_status": performance,
"retention_tracker": performance,
"retentions": performance,
"score": performance,
"score_status": performance,
"score_tracker": performance,
"scores": performance,
"status": performance,
"status_status": performance,
"status_tracker": performance,
"statuss": performance,
"tracker": performance,
"tracker_status": performance,
"tracker_tracker": performance,
"trackers": performance,
"trend": performance,
"trend_status": performance,
"trend_tracker": performance,
"trends": performance
}

# --- Database Setup ---
def init_db():
    conn = sqlite3.connect("edutrack_logs.db")
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS logs (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_query TEXT,
                        agent_response TEXT
                    )''')
    conn.commit()
    conn.close()

init_db()

def log_interaction(user_query, agent_response):
    conn = sqlite3.connect("edutrack_logs.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO logs (user_query, agent_response) VALUES (?, ?)", (user_query, agent_response))
    conn.commit()
    conn.close()

# --- Utility Functions ---
def identify_agent(query):
    for keyword, agent in keyword_map.items():
        if re.search(rf"\\b{keyword}\\b", query, re.IGNORECASE):
            return agent
    return None

# --- FastAPI Setup ---
app = FastAPI()

class Query(BaseModel):
    message: str

@app.post("/ask")
async def ask_edutrack(query: Query):
    user_query = query.message
    agent = identify_agent(user_query)

    if not agent:
        clarification = "I need more details to assist you. Could you please elaborate on your request?"
        log_interaction(user_query, clarification)
        return {"response": clarification}

    # Group chat simulation with routing
    group = GroupChat(agents=[user, agent], messages=[], max_round=3)
    manager = GroupChatManager(groupchat=group, llm_config=config)

    user.initiate_chat(manager, message=user_query)

    last_response = group.messages[-1]['content'] if group.messages else "No response."
    log_interaction(user_query, last_response)
    return {"response": last_response}

# --- Streamlit Frontend ---
st.set_page_config(page_title="Edutrack AI Chatbot")
st.title("📚 Edutrack")

if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

user_input = st.text_input("Ask something about your academics, career, well-being, or performance:")

# if user_input:
#     agent = identify_agent(user_input)
#     if not agent:
#         response = "I need more details to assist you. Could you please elaborate on your request?"
#     else:
#         group = GroupChat(agents=[user, agent], messages=[], max_round=3)
#         manager = GroupChatManager(groupchat=group, llm_config=config)
#         user.initiate_chat(manager, message=user_input)
#         response = group.messages[-1]['content'] if group.messages else "No response."

#     st.session_state.chat_history.append((user_input, response))
#     log_interaction(user_input, response)

# for q, r in reversed(st.session_state.chat_history):
#     st.markdown(f"**You:** {q}")
#     st.markdown(f"**Edutrack:** {r}")
if user_input:
    agent = identify_agent(user_input)
    if not agent:
        response = "I need more details to assist you. Could you please elaborate on your request?"
    else:
        group = GroupChat(agents=[user, agent], messages=[], max_round=3)
        manager = GroupChatManager(groupchat=group, llm_config=config)
        
        # Simulate user input via Streamlit
        group.append_message({"role": "user", "name": "Student", "content": user_input})
        manager.run()
        
        # Get the agent's response
        messages = [msg for msg in group.messages if msg['role'] == 'assistant']
        response = messages[-1]['content'] if messages else "No response."
# --- Run Server ---
# Uncomment the below to run API server
# if __name__ == "__main__":
#     uvicorn.run("edutrack_autogen_pipeline:app", host="0.0.0.0", port=8000, reload=True)